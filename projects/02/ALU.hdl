// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
	// Put you code here:
	Not(in=zx, out=notzx);
	And16(a[0..15]=x,
					b[0]=notzx, 
					b[1]=notzx,
					b[2]=notzx,
					b[3]=notzx,
					b[4]=notzx,
					b[5]=notzx,
					b[6]=notzx,
					b[7]=notzx,
					b[8]=notzx,
					b[9]=notzx,
					b[10]=notzx,
					b[11]=notzx,
					b[12]=notzx,
					b[13]=notzx,
					b[14]=notzx,
					b[15]=notzx, out[0..15]=xandnotzx);
	Not(in=nx, out=notnx);
	And16(a[0..15]=xandnotzx, 
					b[0]=notnx, 
					b[1]=notnx,
					b[2]=notnx,
					b[3]=notnx,
					b[4]=notnx,
					b[5]=notnx,
					b[6]=notnx,
					b[7]=notnx,
					b[8]=notnx,
					b[9]=notnx,
					b[10]=notnx,
					b[11]=notnx,
					b[12]=notnx,
					b[13]=notnx,
					b[14]=notnx,
					b[15]=notnx, out[0..15]=xandnotzxandnotnx);
	Not16(in[0..15]=xandnotzx, out[0..15]=notxandnotzx);
	And16(a[0..15]=notxandnotzx, 
					b[0]=nx, 
					b[1]=nx,
					b[2]=nx,
					b[3]=nx,
					b[4]=nx,
					b[5]=nx,
					b[6]=nx,
					b[7]=nx,
					b[8]=nx,
					b[9]=nx,
					b[10]=nx,
					b[11]=nx,
					b[12]=nx,
					b[13]=nx,
					b[14]=nx,
					b[15]=nx, out[0..15]=notxandnotzxandnx);
	Or16(a[0..15]=xandnotzxandnotnx, b[0..15]=notxandnotzxandnx, out[0..15]=p1);
	
	Not(in=zy, out=notzy);
	And16(a[0..15]=y,
					b[0]=notzy, 
					b[1]=notzy,
					b[2]=notzy,
					b[3]=notzy,
					b[4]=notzy,
					b[5]=notzy,
					b[6]=notzy,
					b[7]=notzy,
					b[8]=notzy,
					b[9]=notzy,
					b[10]=notzy,
					b[11]=notzy,
					b[12]=notzy,
					b[13]=notzy,
					b[14]=notzy,
					b[15]=notzy, out[0..15]=yandnotzy);
	Not(in=ny, out=notny);
	And16(a[0..15]=yandnotzy, 
					b[0]=notny, 
					b[1]=notny,
					b[2]=notny,
					b[3]=notny,
					b[4]=notny,
					b[5]=notny,
					b[6]=notny,
					b[7]=notny,
					b[8]=notny,
					b[9]=notny,
					b[10]=notny,
					b[11]=notny,
					b[12]=notny,
					b[13]=notny,
					b[14]=notny,
					b[15]=notny, out[0..15]=yandnotzyandnotny);
	Not16(in[0..15]=yandnotzy, out[0..15]=notyandnotzy);
	And16(a[0..15]=notyandnotzy, 
					b[0]=ny, 
					b[1]=ny,
					b[2]=ny,
					b[3]=ny,
					b[4]=ny,
					b[5]=ny,
					b[6]=ny,
					b[7]=ny,
					b[8]=ny,
					b[9]=ny,
					b[10]=ny,
					b[11]=ny,
					b[12]=ny,
					b[13]=ny,
					b[14]=ny,
					b[15]=ny, out[0..15]=notyandnotzyandny);
	Or16(a[0..15]=yandnotzyandnotny, b[0..15]=notyandnotzyandny, out[0..15]=p2);
	
	Add16(a[0..15]=p1, b[0..15]=p2, out[0..15]=p3);
	And16(a[0..15]=p1, b[0..15]=p2, out[0..15]]=p4);
	Not(in=f, out=notf);
	And16(a[0..15]=p4, 
					b[0]=notf, 
					b[1]=notf,
					b[2]=notf,
					b[3]=notf,
					b[4]=notf,
					b[5]=notf,
					b[6]=notf,
					b[7]=notf,
					b[8]=notf,
					b[9]=notf,
					b[10]=notf,
					b[11]=notf,
					b[12]=notf,
					b[13]=notf,
					b[14]=notf,
					b[15]=notf, out[0..15]=p4andnotf);
	And16(a[0..15]=p3, 
					b[0]=f, 
					b[1]=f,
					b[2]=f,
					b[3]=f,
					b[4]=f,
					b[5]=f,
					b[6]=f,
					b[7]=f,
					b[8]=f,
					b[9]=f,
					b[10]=f,
					b[11]=f,
					b[12]=f,
					b[13]=f,
					b[14]=f,
					b[15]=f, out[0..15]=p3andf);				
	Or16(a[0..15]=p3andf, b[0..15]=p4andnotf, out[0..15]=p5);
	
	Not(in=no, out=notno);
	Not16(in[0..15]=p5, out[0..15]=notp5);
	And16(a[0..15]=p5, 
					b[0]=notno, 
					b[1]=notno,
					b[2]=notno,
					b[3]=notno,
					b[4]=notno,
					b[5]=notno,
					b[6]=notno,
					b[7]=notno,
					b[8]=notno,
					b[9]=notno,
					b[10]=notno,
					b[11]=notno,
					b[12]=notno,
					b[13]=notno,
					b[14]=notno,
					b[15]=notno, out[0..15]=p5andnotno);
	And16(a[0..15]=notp5, 
					b[0]=no, 
					b[1]=no,
					b[2]=no,
					b[3]=no,
					b[4]=no,
					b[5]=no,
					b[6]=no,
					b[7]=no,
					b[8]=no,
					b[9]=no,
					b[10]=no,
					b[11]=no,
					b[12]=no,
					b[13]=no,
					b[14]=no,
					b[15]=no, out[0..15]=notp5andno);
	Or16(a[0..15]=p5andnotno, b[0..15]=notp5andno, out[0..15]=p6);
	And16(a[0..15]=p6, b[0..15]=true, out[0..15]=out);
	And16(a[0..15]=p6, b[0..15]=true, out[0..7]=w1, out[8..15]=w2);
	
	Or8Way(in[0..7]=w1, out=w3);
	Or8Way(in[0..7]=w2, out=w4);
	Or(a=w3, b=w4, out=w5);
	Not(in=w5, out=zr);
	And(a=w4, b=true, out=ng);
}