// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    // Put your code here:
	DMux8Way(in=true, sel[0]=address[3], sel[1]=address[4], sel[2]=address[5], a=p1, b=p2, c=p3, d=p4, e=p5, f=p6, g=p7, h=p8);
	And(a=load, b=p1, out=w1);
	And(a=load, b=p2, out=w2);
	And(a=load, b=p3, out=w3);
	And(a=load, b=p4, out=w4);
	And(a=load, b=p5, out=w5);
	And(a=load, b=p6, out=w6);
	And(a=load, b=p7, out=w7);
	And(a=load, b=p8, out=w8);
	RAM8(in=in, load=w1, address[0]=address[0], address[1]=address[1], address[2]=address[2], out=o1);
	RAM8(in=in, load=w2, address[0]=address[0], address[1]=address[1], address[2]=address[2], out=o2);
	RAM8(in=in, load=w3, address[0]=address[0], address[1]=address[1], address[2]=address[2], out=o3);
	RAM8(in=in, load=w4, address[0]=address[0], address[1]=address[1], address[2]=address[2], out=o4);
	RAM8(in=in, load=w5, address[0]=address[0], address[1]=address[1], address[2]=address[2], out=o5);
	RAM8(in=in, load=w6, address[0]=address[0], address[1]=address[1], address[2]=address[2], out=o6);
	RAM8(in=in, load=w7, address[0]=address[0], address[1]=address[1], address[2]=address[2], out=o7);
	RAM8(in=in, load=w8, address[0]=address[0], address[1]=address[1], address[2]=address[2], out=o8);
	Mux8Way16(a=o1, b=o2, c=o3, d=o4, e=o5, f=o6, g=o7, h=o8, sel[0]=address[3], sel[1]=address[4], sel[2]=address[5] , out=out);
}